package ${package}.${apiname}.business.${businessName}.controller;

import com.alibaba.fastjson.JSONObject;
import ${package}.common.web.annotation.GenericResponseBody;
import ${package}.${apiname}.business.${businessName}.service.IApi${className}Service;
import ${package}.${servicename}.api.dto.request.*;
import ${package}.${servicename}.api.dto.response.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;


/**
 * ${comments}
 */
@Api(tags = "${className} Controller",
        value="${className} API",
        description = "${className}相关RESTFul API")
@RestController
public class Api${className}Controller {
    private static final Logger LOG = LoggerFactory.getLogger(Api${className}Controller.class);

    @Autowired
    private IApi${className}Service api${className}Service;


    @ApiOperation(value = "获取${comments}列表", notes="获取${comments}列表")
    @PostMapping(value = "/${pathName}/select${className}List",
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @GenericResponseBody
    public Select${className}ListResponse select${className}List(@RequestBody Select${className}ListRequest request){
        return api${className}Service.select${className}List(request);
    }

    @ApiOperation(value = "查询${comments}信息", notes="查询${comments}信息")
    @PostMapping(value = "/${pathName}/get${className}",
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @GenericResponseBody
    public Get${className}Response get${className}(@RequestBody Get${className}Request request){
        return api${className}Service.get${className}(request);
    }

    @ApiOperation(value = "删除${comments}信息", notes="删除${comments}信息")
    @PostMapping(value = "/${pathName}/delete${className}",
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @GenericResponseBody
    public Boolean delete${className}(@RequestBody Delete${className}Request request){
        return api${className}Service.delete${className}(request);
    }

    @ApiOperation(value = "更新${comments}信息", notes="更新${comments}信息")
    @PostMapping(value = "/${pathName}/update${className}",
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @GenericResponseBody
    public Boolean update${className}(@RequestBody Update${className}Request request){
        return api${className}Service.update${className}(request);
    }

    @ApiOperation(value = "创建${comments}信息", notes="创建${comments}信息")
    @PostMapping(value = "/${pathName}/create${className}",
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @GenericResponseBody
    public Boolean create${className}(@RequestBody Create${className}Request request){
        return api${className}Service.create${className}(request);
    }



}
